using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class UIManager
{
    // UI????????????��??
    private const string UI_PREFABS_PATH = "Prefabs/UI/";

    private static UIManager instance = new UIManager();

    public static UIManager Instance => instance;
    // canvas??Transform
    private Transform canvasTransform;

    /// <summary>
    /// ?��??????????????????��??????????
    /// </summary>
    private Dictionary<string, PanelBase> panels = new Dictionary<string, PanelBase>();

    private UIManager()
    {
        Init();
    }

    private void Init()
    {
        // ????????��???canvas????
        InstantiateUniqueCanvas();
    }

    private void InstantiateUniqueCanvas()
    {
        // ???canvas????
        GameObject canvasObject = GameObject.Find("Canvas");
        if (canvasObject == null)
        {
            GameObject canvasPrefab = Resources.Load<GameObject>(UI_PREFABS_PATH + "Canvas");
            canvasObject = Object.Instantiate(canvasPrefab);
        }

        canvasTransform = canvasObject.transform;

        // Canvas????????????????
        // ???Canvse?????��???
        Object.DontDestroyOnLoad(canvasObject);
    }

    // ?????????��?????????????????????????
    // ???????????��????????????????????????��?????????????????????
    // ?????????????????????????????????????????
    public T CreatePanel<T>() where T : PanelBase
    {
        // ??????????????��???
        string panelName = typeof(T).Name;
        if (panels.ContainsKey(panelName))
            return panels[panelName] as T; // ????????????????????

        // ??????????
        // ????????????????????????????
        GameObject panelPrefab = Resources.Load<GameObject>(UI_PREFABS_PATH + "Panels/" + panelName);
        GameObject panelObject = Object.Instantiate(panelPrefab, canvasTransform);

        PanelBase panel = panelObject.GetComponent<PanelBase>();
        panels.Add(panelName, panel); // ??????????????
        return panel as T;
    }

    /// <summary>
    /// ??????
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="showMode">??????</param>
    /// <param name="onFinished">??????????????��????</param>
    /// <returns></returns>
    public T ShowPanel<T>(PanelBase.ShowMode showMode = PanelBase.ShowMode.Fade, UnityAction onFinished = null) where T : PanelBase
    {
        string panelName = typeof(T).Name;
        PanelBase panel;
        if (panels.ContainsKey(panelName))
            panel = panels[panelName] as T;
        else
            // ????�I???????????
            panel = CreatePanel<T>();

        // ???????????????
        panel.Show(showMode, onFinished);

        return panel as T;
    }

    /// <summary>
    /// ???????
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="showMode">??????</param>
    /// <param name="onFinished">???????????????��????</param>
    /// <param name="onFinished">??????????????????????????</param>
    public void HidePanel<T>(PanelBase.ShowMode showMode = PanelBase.ShowMode.Fade, UnityAction onFinished = null, bool destroy = true) where T : PanelBase
    {
        string panelName = typeof(T).Name;
        if (panels.ContainsKey(panelName))
        {
            PanelBase panel = panels[panelName];
            if (destroy)
            {
                onFinished += () => Object.Destroy(panel.gameObject); // ??????????????GameObject
                panels.Remove(panelName); // ?????????????
            }

            panel.Hide(showMode, onFinished);
        }
        // ?????��???????????????????????
    }

    /// <summary>
    /// ??????
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <returns></returns>
    public T GetPanel<T>() where T : PanelBase
    {
        string panelName = typeof(T).Name;
        if (panels.ContainsKey(panelName))
            return panels[panelName] as T; // ???????????????
        return null; // ?????�I?????????null
    }
}
